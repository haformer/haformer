from transformers import AutoTokenizer, AutoConfig
import torch
from torch.utils.data import DataLoader, TensorDataset
from data_utils import norm_inst, norm_hex
import json
from tqdm import tqdm
import argparse
from haformer_model_utils import HaformerForFinetune


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="print finetune data.")
    parser.add_argument("--config_name", type=str,
                        default='./output/model/finetune/haformer-base-bin/')
    parser.add_argument("--tokenizer_name", type=str,
                        default='./output/model/finetune/haformer-base-bin/')
    parser.add_argument("--model_name_or_path", type=str,
                        default='./output/model/finetune/haformer-base-bin/')
    parser.add_argument("--max_seq_length", type=int, default=512)

    args = parser.parse_args()

    config = AutoConfig.from_pretrained(args.config_name)

    tokenizer = AutoTokenizer.from_pretrained(args.tokenizer_name, use_fast=False, do_lower_case=False,
                                              do_basic_tokenize=False)

    model = HaformerForFinetune.from_pretrained(args.model_name_or_path, config=config)

    hex_str_list = []
    hex_str_list.append(
        '[["80 3d 90 17 0b 08 00", "75 3d"], ["55", "89 e5", "56", "be 20 11 0b 08", "53", "bb 24 11 0b 08", "81 eb 20 11 0b 08", "c1 fb 02", "4b"], ["a1 94 17 0b 08", "39 d8", "73 0b"], ["40", "a3 94 17 0b 08", "ff 14 86", "eb ec"], ["e8 67 ff ff ff", "5b", "5e", "c6 05 90 17 0b 08 01", "5d", "c3"], ["c3"]]')
    hex_str_list.append(
        '[["55", "89 e5", "56", "81 ec b4 00 00 00", "8b 45 0c", "8b 4d 08", "c7 45 f8 00 00 00 00", "8b 55 0c", "8b 12", "89 14 24", "89 45 dc", "89 4d d8", "e8 66 39 05 00", "a3 50 1f 0b 08", "a1 50 1f 0b 08", "89 04 24", "e8 34 3c 05 00", "a3 48 1f 0b 08", "8d 05 8c 14 0a 08", "a3 08 14 0b 08", "c7 04 24 02 00 00 00", "8d 05 9e 41 0a 08", "89 44 24 04", "e8 3e fd ff ff", "31 c9", "c7 04 24 00 00 00 00", "8d 15 9e 41 0a 08", "89 54 24 04", "89 45 d4", "89 4d d0", "e8 20 fd ff ff", "8d 0d ab 15 0a 08", "89 0c 24", "8d 0d 2e 15 0a 08", "89 4c 24 04", "89 45 cc", "e8 85 fd ff ff", "8d 0d ab 15 0a 08", "89 0c 24", "89 45 c8", "e8 d4 f9 ff ff", "31 c9", "8b 55 08", "8b 75 0c", "89 14 24", "89 74 24 04", "c7 44 24 08 00 00 00 00", "8d 15 a7 15 0a 08", "89 54 24 0c", "8d 15 b0 15 0a 08", "89 54 24 10", "8d 15 b5 15 0a 08", "89 54 24 14", "8d 15 f0 a6 04 08", "89 54 24 18", "89 45 c4", "89 4d c0", "e8 1a 5e 01 00", "8d 05 e0 ab 04 08", "89 04 24", "e8 7c 71 05 00", "89 45 bc", "e8 c4 ae 04 00", "c7 04 24 02 00 00 00", "8d 05 30 ac 04 08", "89 44 24 04", "e8 ce f8 ff ff", "b9 01 00 00 00", "39 c8", "0f 85 18 00 00 00"], ["c7 04 24 02 00 00 00", "b8 01 00 00 00", "89 44 24 04", "e8 ac f8 ff ff", "89 45 b8"], ["e9 00 00 00 00"], ["e9 00 00 00 00"], ["c7 04 24 01 00 00 00", "8d 05 30 ac 04 08", "89 44 24 04", "e8 89 f8 ff ff", "b9 01 00 00 00", "39 c8", "0f 85 18 00 00 00"], ["c7 04 24 01 00 00 00", "b8 01 00 00 00", "89 44 24 04", "e8 67 f8 ff ff", "89 45 b4"], ["e9 00 00 00 00"], ["e9 00 00 00 00"], ["c7 04 24 0f 00 00 00", "8d 05 30 ac 04 08", "89 44 24 04", "e8 44 f8 ff ff", "b9 01 00 00 00", "39 c8", "0f 85 18 00 00 00"], ["c7 04 24 0f 00 00 00", "b8 01 00 00 00", "89 44 24 04", "e8 22 f8 ff ff", "89 45 b0"], ["e9 00 00 00 00"], ["c7 04 24 0d 00 00 00", "8d 05 30 ac 04 08", "89 44 24 04", "e8 04 f8 ff ff", "8d 0d 40 34 05 08", "89 0d 94 19 0b 08", "8d 0d 90 ac 04 08", "89 0d cc 19 0b 08", "89 45 ac", "e8 04 92 00 00", "a3 4c 1f 0b 08", "c7 04 24 24 b2 01 00", "e8 33 a4 00 00", "89 45 a8", "e8 fb 4a 02 00", "a3 9c 17 0b 08", "a1 9c 17 0b 08", "89 04 24", "e8 59 d1 02 00", "8d 05 d3 15 0a 08", "89 04 24", "e8 4b f9 ff ff", "83 f8 00", "0f 85 3c 00 00 00"], ["a1 9c 17 0b 08", "8b 0d 9c 17 0b 08", "89 0c 24", "8d 0d e0 15 0a 08", "89 4c 24 04", "89 45 a4", "e8 82 fd 02 00", "8b 4d a4", "89 0c 24", "89 44 24 04", "8d 05 ea 15 0a 08", "89 44 24 08", "e8 99 c2 02 00", "89 45 a0"], ["a1 9c 17 0b 08", "89 04 24", "8d 05 b8 4a 0a 08", "89 44 24 04", "8d 05 f7 15 0a 08", "89 44 24 08", "e8 75 c2 02 00", "89 45 9c", "e8 7d 77 00 00", "a3 a4 17 0b 08", "e8 d3 69 00 00", "a3 a8 17 0b 08", "a1 9c 17 0b 08", "8b 4d 08", "8b 55 0c", "89 04 24", "89 4c 24 04", "89 54 24 08", "e8 b3 ee 03 00", "89 45 f4", "a1 9c 17 0b 08", "89 04 24", "e8 d3 50 02 00", "a1 9c 17 0b 08", "f6 80 d8 00 00 00 01", "0f 84 0b 00 00 00"], ["8d 05 90 af 04 08", "a3 90 19 0b 08"], ["8b 45 0c", "8b 0d 9c 17 0b 08", "89 01", "8b 45 08", "8b 0d 9c 17 0b 08", "89 41 04", "a1 98 17 0b 08", "89 c1", "83 e9 15", "89 45 98", "89 4d 94", "0f 87 b5 05 00 00"], ["8b 45 98", "8b 0c 85 10 11 0a 08", "ff e1"], ["8b 45 f4", "3b 45 08", "0f 8d 35 00 00 00"], ["e9 00 00 00 00"], ["8b 45 f4", "3b 45 08", "0f 8d 1f 00 00 00"], ["8b 45 0c", "8b 4d f4", "8b 04 88", "89 04 24", "e8 ff 8f 00 00", "8b 45 f4", "83 c0 01", "89 45 f4", "e9 d5 ff ff ff"], ["e9 11 00 00 00"], ["31 c0", "c7 04 24 00 00 00 00", "89 45 90", "e8 db 8f 00 00"], ["e9 57 05 00 00"], ["e9 00 00 00 00"], ["8b 45 f4", "3b 45 08", "0f 8d 75 00 00 00"], ["a1 9c 17 0b 08", "8b 0d 9c 17 0b 08", "8b 89 70 05 00 00", "8b 49 18", "8b 09", "8b 55 0c", "8b 75 f4", "8b 14 b2", "89 04 24", "89 4c 24 04", "8d 05 ff 15 0a 08", "89 44 24 08", "89 54 24 0c", "e8 3c fd 02 00", "8b 0d 84 17 0b 08", "89 04 24", "89 4c 24 04", "e8 7a fa ff ff", "8b 0d 84 17 0b 08", "c7 04 24 0a 00 00 00", "89 4c 24 04", "89 45 8c", "e8 91 f6 ff ff", "89 45 88", "8b 45 f4", "83 c0 01", "89 45 f4", "e9 7f ff ff ff"], ["e9 cc 04 00 00"], ["e9 00 00 00 00"], ["8b 45 f4", "3b 45 08", "0f 8d 7f 00 00 00"], ["31 c0", "8b 0d 9c 17 0b 08", "8b 49 08", "8b 55 0c", "8b 75 f4", "8b 14 b2", "89 0c 24", "89 54 24 04", "c7 44 24 08 00 00 00 00", "89 45 84", "e8 9f c8 04 00", "89 45 f0", "83 7d f0 00", "0f 84 34 00 00 00"], ["8b 45 f0", "8b 0d 84 17 0b 08", "89 04 24", "89 4c 24 04", "e8 ed f9 ff ff", "8b 0d 84 17 0b 08", "c7 04 24 0a 00 00 00", "89 4c 24 04", "89 45 80", "e8 04 f6 ff ff", "89 85 7c ff ff ff"], ["e9 00 00 00 00"], ["8b 45 f4", "83 c0 01", "89 45 f4", "e9 75 ff ff ff"], ["e9 37 04 00 00"], ["e9 00 00 00 00"], ["8b 45 f4", "3b 45 08", "0f 8d 35 00 00 00"], ["a1 9c 17 0b 08", "8b 40 08", "8b 4d 0c", "8b 55 f4", "8b 0c 91", "8b 15 84 17 0b 08", "89 04 24", "89 4c 24 04", "89 54 24 08", "e8 ae d2 04 00", "8b 45 f4", "83 c0 01", "89 45 f4", "e9 bf ff ff ff"], ["e9 ec 03 00 00"], ["31 c0", "8b 0d 84 17 0b 08", "89 0c 24", "c7 44 24 04 00 00 00 00", "8d 0d a7 15 0a 08", "89 4c 24 08", "8d 0d b0 15 0a 08", "89 4c 24 0c", "8d 0d b5 15 0a 08", "89 4c 24 10", "89 85 78 ff ff ff", "e8 9f 58 01 00", "e9 ab 03 00 00"], ["31 c0", "c7 04 24 00 00 00 00", "89 85 74 ff ff ff", "e8 c6 03 00 00"], ["e9 92 03 00 00"], ["a1 9c 17 0b 08", "8b 0d 84 17 0b 08", "89 04 24", "89 4c 24 04", "e8 6a 0f 00 00", "e9 76 03 00 00"], ["a1 9c 17 0b 08", "8b 0d 84 17 0b 08", "89 04 24", "89 4c 24 04", "e8 8e 1f 00 00", "e9 5a 03 00 00"], ["a1 9c 17 0b 08", "8b 0d 84 17 0b 08", "89 04 24", "89 4c 24 04", "e8 42 43 02 00", "e9 3e 03 00 00"], ["a1 84 17 0b 08", "89 04 24", "e8 f0 57 00 00", "e9 2c 03 00 00"], ["a1 84 17 0b 08", "89 04 24", "e8 ce 5b 00 00", "e9 1a 03 00 00"], ["a1 84 17 0b 08", "89 04 24", "e8 4c 63 00 00", "e9 08 03 00 00"], ["a1 9c 17 0b 08", "8b 0d 84 17 0b 08", "89 04 24", "89 4c 24 04", "e8 20 e0 02 00", "e9 ec 02 00 00"], ["a1 4c 1f 0b 08", "8b 0d 84 17 0b 08", "89 04 24", "89 4c 24 04", "e8 d4 9c 00 00", "e9 d0 02 00 00"], ["a1 9c 17 0b 08", "8b 0d 84 17 0b 08", "89 04 24", "89 4c 24 04", "e8 68 fa 02 00", "e9 b4 02 00 00"], ["a1 9c 17 0b 08", "8b 0d 84 17 0b 08", "89 04 24", "89 4c 24 04", "e8 cc 29 02 00", "e9 98 02 00 00"], ["a1 9c 17 0b 08", "8b 0d 84 17 0b 08", "89 04 24", "89 4c 24 04", "e8 20 2b 02 00", "e9 7c 02 00 00"], ["a1 9c 17 0b 08", "8b 0d 84 17 0b 08", "89 04 24", "89 4c 24 04", "e8 14 cf 02 00", "e9 60 02 00 00"], ["a1 9c 17 0b 08", "8b 0d 84 17 0b 08", "89 04 24", "89 4c 24 04", "e8 48 9b 02 00", "e9 44 02 00 00"], ["a1 9c 17 0b 08", "8b 0d 84 17 0b 08", "89 04 24", "89 4c 24 04", "e8 5c 9c 02 00", "e9 28 02 00 00"], ["a1 9c 17 0b 08", "8b 0d 84 17 0b 08", "89 04 24", "89 4c 24 04", "e8 40 e1 02 00", "e9 0c 02 00 00"], ["c7 45 ec 00 00 00 00", "c7 45 e8 00 00 00 00", "a1 9c 17 0b 08", "89 04 24", "e8 90 d0 02 00", "8b 45 f4", "3b 45 08", "0f 85 27 00 00 00"], ["31 c0", "c7 04 24 00 00 00 00", "8d 4d e8", "89 4c 24 04", "8d 4d ec", "89 4c 24 08", "89 85 70 ff ff ff", "e8 b2 80 00 00", "e9 43 00 00 00"], ["e9 00 00 00 00"], ["8b 45 f4", "3b 45 08", "0f 8d 2d 00 00 00"], ["8b 45 0c", "8b 4d f4", "8b 04 88", "89 04 24", "8d 45 e8", "89 44 24 04", "8d 45 ec", "89 44 24 08", "e8 7d 80 00 00", "8b 45 f4", "83 c0 01", "89 45 f4", "e9 c7 ff ff ff"], ["e9 00 00 00 00"], ["83 3d ac 17 0b 08 00", "0f 84 38 00 00 00"], ["a1 ac 17 0b 08", "0f b6 00", "83 f8 00", "0f 84 27 00 00 00"], ["8d 05 0d 16 0a 08", "89 04 24", "e8 4e f4 ff ff", "8b 0d ac 17 0b 08", "89 04 24", "89 4c 24 04", "8d 45 e8", "89 44 24 08", "e8 c5 7e 00 00"], ["83 7d e8 00", "0f 85 e5 00 00 00"], ["83 7d ec 01", "0f 85 db 00 00 00"], ["a1 9c 17 0b 08", "8b 80 70 05 00 00", "8b 40 18", "8b 0d 9c 17 0b 08", "8b 89 70 05 00 00", "8b 49 14", "83 e9 01", "8b 04 88", "89 45 e4", "a1 9c 17 0b 08", "8b 80 70 05 00 00", "8b 40 14", "89 45 e0"], ["8b 45 e4", "83 78 04 00", "0f 95 c1", "80 f1 ff", "f6 c1 01", "0f 85 05 00 00 00"], ["e9 28 00 00 00"], ["8b 45 e0", "83 c0 ff", "89 45 e0", "a1 9c 17 0b 08", "8b 80 70 05 00 00", "8b 40 18", "8b 4d e0", "83 e9 01", "8b 04 88", "89 45 e4", "e9 bd ff ff ff"], ["a1 9c 17 0b 08", "89 04 24", "e8 fa df 02 00", "a1 9c 17 0b 08", "8b 80 b8 00 00 00", "8b 40 04", "8b 4d e4", "8b 49 04", "89 04 24", "89 4c 24 04", "e8 9a e3 01 00", "8b 45 e4", "8b 40 04", "89 04 24", "e8 ec f1 ff ff", "8b 0d 9c 17 0b 08", "89 0c 24", "89 85 6c ff ff ff", "e8 d8 e2 02 00", "a1 9c 17 0b 08", "89 04 24", "e8 3b 7b 00 00", "e9 3d 00 00 00"], ["83 7d e8 00", "0f 85 0a 00 00 00"], ["83 7d ec 00", "0f 84 1f 00 00 00"], ["a1 9c 17 0b 08", "89 04 24", "e8 25 d0 02 00", "a1 9c 17 0b 08", "89 04 24", "e8 08 7b 00 00", "e9 05 00 00 00"], ["e8 4e 7d 00 00"], ["e9 00 00 00 00"], ["e9 05 00 00 00"], ["e8 5f f5 ff ff"], ["a1 9c 17 0b 08", "89 04 24", "e8 f2 4b 02 00", "31 c0", "c7 05 9c 17 0b 08 00 00 00 00", "81 c4 b4 00 00 00", "5e", "5d", "c3"]]')
    asm_str_list = []
    asm_str_list.append(
        '[["cmp byte ptr [0x80b1790], 0", "jne 0x8049dc8"], ["push ebp", "mov ebp, esp", "push esi", "mov esi, 0x80b1120", "push ebx", "mov ebx, 0x80b1124", "sub ebx, 0x80b1120", "sar ebx, 2", "dec ebx"], ["mov eax, dword ptr [0x80b1794]", "cmp eax, ebx", "jae 0x8049db8"], ["inc eax", "mov dword ptr [0x80b1794], eax", "call dword ptr [esi + eax*4]", "jmp 0x8049da4"], ["call 0x8049d24", "pop ebx", "pop esi", "mov byte ptr [0x80b1790], 1", "pop ebp", "ret "], ["ret "]]')
    asm_str_list.append(
        '[["push ebp", "mov ebp, esp", "push esi", "sub esp, 0xb4", "mov eax, dword ptr [ebp + 0xc]", "mov ecx, dword ptr [ebp + 8]", "mov dword ptr [ebp - 8], 0", "mov edx, dword ptr [ebp + 0xc]", "mov edx, dword ptr [edx]", "mov dword ptr [esp], edx", "mov dword ptr [ebp - 0x24], eax", "mov dword ptr [ebp - 0x28], ecx", "call 0x809d760", "mov dword ptr [0x80b1f50], eax", "mov eax, dword ptr [0x80b1f50]", "mov dword ptr [esp], eax", "call 0x809da40", "mov dword ptr [0x80b1f48], eax", "lea eax, [0x80a148c]", "mov dword ptr [0x80b1408], eax", "mov dword ptr [esp], 2", "lea eax, [0x80a419e]", "mov dword ptr [esp + 4], eax", "call 0x8049b70", "xor ecx, ecx", "mov dword ptr [esp], 0", "lea edx, [0x80a419e]", "mov dword ptr [esp + 4], edx", "mov dword ptr [ebp - 0x2c], eax", "mov dword ptr [ebp - 0x30], ecx", "call 0x8049b70", "lea ecx, [0x80a15ab]", "mov dword ptr [esp], ecx", "lea ecx, [0x80a152e]", "mov dword ptr [esp + 4], ecx", "mov dword ptr [ebp - 0x34], eax", "call 0x8049bf0", "lea ecx, [0x80a15ab]", "mov dword ptr [esp], ecx", "mov dword ptr [ebp - 0x38], eax", "call 0x8049850", "xor ecx, ecx", "mov edx, dword ptr [ebp + 8]", "mov esi, dword ptr [ebp + 0xc]", "mov dword ptr [esp], edx", "mov dword ptr [esp + 4], esi", "mov dword ptr [esp + 8], 0", "lea edx, [0x80a15a7]", "mov dword ptr [esp + 0xc], edx", "lea edx, [0x80a15b0]", "mov dword ptr [esp + 0x10], edx", "lea edx, [0x80a15b5]", "mov dword ptr [esp + 0x14], edx", "lea edx, [0x804a6f0]", "mov dword ptr [esp + 0x18], edx", "mov dword ptr [ebp - 0x3c], eax", "mov dword ptr [ebp - 0x40], ecx", "call 0x805fce0", "lea eax, [0x804abe0]", "mov dword ptr [esp], eax", "call 0x80a1050", "mov dword ptr [ebp - 0x44], eax", "call 0x8094da0", "mov dword ptr [esp], 2", "lea eax, [0x804ac30]", "mov dword ptr [esp + 4], eax", "call 0x80497c0", "mov ecx, 1", "cmp eax, ecx", "jne 0x8049f17"], ["mov dword ptr [esp], 2", "mov eax, 1", "mov dword ptr [esp + 4], eax", "call 0x80497c0", "mov dword ptr [ebp - 0x48], eax"], ["jmp 0x8049f1c"], ["jmp 0x8049f21"], ["mov dword ptr [esp], 1", "lea eax, [0x804ac30]", "mov dword ptr [esp + 4], eax", "call 0x80497c0", "mov ecx, 1", "cmp eax, ecx", "jne 0x8049f5c"], ["mov dword ptr [esp], 1", "mov eax, 1", "mov dword ptr [esp + 4], eax", "call 0x80497c0", "mov dword ptr [ebp - 0x4c], eax"], ["jmp 0x8049f61"], ["jmp 0x8049f66"], ["mov dword ptr [esp], 0xf", "lea eax, [0x804ac30]", "mov dword ptr [esp + 4], eax", "call 0x80497c0", "mov ecx, 1", "cmp eax, ecx", "jne 0x8049fa1"], ["mov dword ptr [esp], 0xf", "mov eax, 1", "mov dword ptr [esp + 4], eax", "call 0x80497c0", "mov dword ptr [ebp - 0x50], eax"], ["jmp 0x8049fa6"], ["mov dword ptr [esp], 0xd", "lea eax, [0x804ac30]", "mov dword ptr [esp + 4], eax", "call 0x80497c0", "lea ecx, [0x8053440]", "mov dword ptr [0x80b1994], ecx", "lea ecx, [0x804ac90]", "mov dword ptr [0x80b19cc], ecx", "mov dword ptr [ebp - 0x54], eax", "call 0x80531e0", "mov dword ptr [0x80b1f4c], eax", "mov dword ptr [esp], 0x1b224", "call 0x8054420", "mov dword ptr [ebp - 0x58], eax", "call 0x806eaf0", "mov dword ptr [0x80b179c], eax", "mov eax, dword ptr [0x80b179c]", "mov dword ptr [esp], eax", "call 0x8077160", "lea eax, [0x80a15d3]", "mov dword ptr [esp], eax", "call 0x8049960", "cmp eax, 0", "jne 0x804a05a"], ["mov eax, dword ptr [0x80b179c]", "mov ecx, dword ptr [0x80b179c]", "mov dword ptr [esp], ecx", "lea ecx, [0x80a15e0]", "mov dword ptr [esp + 4], ecx", "mov dword ptr [ebp - 0x5c], eax", "call 0x8079dc0", "mov ecx, dword ptr [ebp - 0x5c]", "mov dword ptr [esp], ecx", "mov dword ptr [esp + 4], eax", "lea eax, [0x80a15ea]", "mov dword ptr [esp + 8], eax", "call 0x80762f0", "mov dword ptr [ebp - 0x60], eax"], ["mov eax, dword ptr [0x80b179c]", "mov dword ptr [esp], eax", "lea eax, [0x80a4ab8]", "mov dword ptr [esp + 4], eax", "lea eax, [0x80a15f7]", "mov dword ptr [esp + 8], eax", "call 0x80762f0", "mov dword ptr [ebp - 0x64], eax", "call 0x8051800", "mov dword ptr [0x80b17a4], eax", "call 0x8050a60", "mov dword ptr [0x80b17a8], eax", "mov eax, dword ptr [0x80b179c]", "mov ecx, dword ptr [ebp + 8]", "mov edx, dword ptr [ebp + 0xc]", "mov dword ptr [esp], eax", "mov dword ptr [esp + 4], ecx", "mov dword ptr [esp + 8], edx", "call 0x8088f60", "mov dword ptr [ebp - 0xc], eax", "mov eax, dword ptr [0x80b179c]", "mov dword ptr [esp], eax", "call 0x806f190", "mov eax, dword ptr [0x80b179c]", "test byte ptr [eax + 0xd8], 1", "je 0x804a0da"], ["lea eax, [0x804af90]", "mov dword ptr [0x80b1990], eax"], ["mov eax, dword ptr [ebp + 0xc]", "mov ecx, dword ptr [0x80b179c]", "mov dword ptr [ecx], eax", "mov eax, dword ptr [ebp + 8]", "mov ecx, dword ptr [0x80b179c]", "mov dword ptr [ecx + 4], eax", "mov eax, dword ptr [0x80b1798]", "mov ecx, eax", "sub ecx, 0x15", "mov dword ptr [ebp - 0x68], eax", "mov dword ptr [ebp - 0x6c], ecx", "ja 0x804a6bc"], ["mov eax, dword ptr [ebp - 0x68]", "mov ecx, dword ptr [eax*4 + 0x80a1110]", "jmp ecx"], ["mov eax, dword ptr [ebp - 0xc]", "cmp eax, dword ptr [ebp + 8]", "jge 0x804a154"], ["jmp 0x804a124"], ["mov eax, dword ptr [ebp - 0xc]", "cmp eax, dword ptr [ebp + 8]", "jge 0x804a14f"], ["mov eax, dword ptr [ebp + 0xc]", "mov ecx, dword ptr [ebp - 0xc]", "mov eax, dword ptr [eax + ecx*4]", "mov dword ptr [esp], eax", "call 0x8053140", "mov eax, dword ptr [ebp - 0xc]", "add eax, 1", "mov dword ptr [ebp - 0xc], eax", "jmp 0x804a124"], ["jmp 0x804a165"], ["xor eax, eax", "mov dword ptr [esp], 0", "mov dword ptr [ebp - 0x70], eax", "call 0x8053140"], ["jmp 0x804a6c1"], ["jmp 0x804a16f"], ["mov eax, dword ptr [ebp - 0xc]", "cmp eax, dword ptr [ebp + 8]", "jge 0x804a1f0"], ["mov eax, dword ptr [0x80b179c]", "mov ecx, dword ptr [0x80b179c]", "mov ecx, dword ptr [ecx + 0x570]", "mov ecx, dword ptr [ecx + 0x18]", "mov ecx, dword ptr [ecx]", "mov edx, dword ptr [ebp + 0xc]", "mov esi, dword ptr [ebp - 0xc]", "mov edx, dword ptr [edx + esi*4]", "mov dword ptr [esp], eax", "mov dword ptr [esp + 4], ecx", "lea eax, [0x80a15ff]", "mov dword ptr [esp + 8], eax", "mov dword ptr [esp + 0xc], edx", "call 0x8079ef0", "mov ecx, dword ptr [0x80b1784]", "mov dword ptr [esp], eax", "mov dword ptr [esp + 4], ecx", "call 0x8049c40", "mov ecx, dword ptr [0x80b1784]", "mov dword ptr [esp], 0xa", "mov dword ptr [esp + 4], ecx", "mov dword ptr [ebp - 0x74], eax", "call 0x8049870", "mov dword ptr [ebp - 0x78], eax", "mov eax, dword ptr [ebp - 0xc]", "add eax, 1", "mov dword ptr [ebp - 0xc], eax", "jmp 0x804a16f"], ["jmp 0x804a6c1"], ["jmp 0x804a1fa"], ["mov eax, dword ptr [ebp - 0xc]", "cmp eax, dword ptr [ebp + 8]", "jge 0x804a285"], ["xor eax, eax", "mov ecx, dword ptr [0x80b179c]", "mov ecx, dword ptr [ecx + 8]", "mov edx, dword ptr [ebp + 0xc]", "mov esi, dword ptr [ebp - 0xc]", "mov edx, dword ptr [edx + esi*4]", "mov dword ptr [esp], ecx", "mov dword ptr [esp + 4], edx", "mov dword ptr [esp + 8], 0", "mov dword ptr [ebp - 0x7c], eax", "call 0x8096ad0", "mov dword ptr [ebp - 0x10], eax", "cmp dword ptr [ebp - 0x10], 0", "je 0x804a272"], ["mov eax, dword ptr [ebp - 0x10]", "mov ecx, dword ptr [0x80b1784]", "mov dword ptr [esp], eax", "mov dword ptr [esp + 4], ecx", "call 0x8049c40", "mov ecx, dword ptr [0x80b1784]", "mov dword ptr [esp], 0xa", "mov dword ptr [esp + 4], ecx", "mov dword ptr [ebp - 0x80], eax", "call 0x8049870", "mov dword ptr [ebp - 0x84], eax"], ["jmp 0x804a277"], ["mov eax, dword ptr [ebp - 0xc]", "add eax, 1", "mov dword ptr [ebp - 0xc], eax", "jmp 0x804a1fa"], ["jmp 0x804a6c1"], ["jmp 0x804a28f"], ["mov eax, dword ptr [ebp - 0xc]", "cmp eax, dword ptr [ebp + 8]", "jge 0x804a2d0"], ["mov eax, dword ptr [0x80b179c]", "mov eax, dword ptr [eax + 8]", "mov ecx, dword ptr [ebp + 0xc]", "mov edx, dword ptr [ebp - 0xc]", "mov ecx, dword ptr [ecx + edx*4]", "mov edx, dword ptr [0x80b1784]", "mov dword ptr [esp], eax", "mov dword ptr [esp + 4], ecx", "mov dword ptr [esp + 8], edx", "call 0x8097570", "mov eax, dword ptr [ebp - 0xc]", "add eax, 1", "mov dword ptr [ebp - 0xc], eax", "jmp 0x804a28f"], ["jmp 0x804a6c1"], ["xor eax, eax", "mov ecx, dword ptr [0x80b1784]", "mov dword ptr [esp], ecx", "mov dword ptr [esp + 4], 0", "lea ecx, [0x80a15a7]", "mov dword ptr [esp + 8], ecx", "lea ecx, [0x80a15b0]", "mov dword ptr [esp + 0xc], ecx", "lea ecx, [0x80a15b5]", "mov dword ptr [esp + 0x10], ecx", "mov dword ptr [ebp - 0x88], eax", "call 0x805fbb0", "jmp 0x804a6c1"], ["xor eax, eax", "mov dword ptr [esp], 0", "mov dword ptr [ebp - 0x8c], eax", "call 0x804a6f0"], ["jmp 0x804a6c1"], ["mov eax, dword ptr [0x80b179c]", "mov ecx, dword ptr [0x80b1784]", "mov dword ptr [esp], eax", "mov dword ptr [esp + 4], ecx", "call 0x804b2b0", "jmp 0x804a6c1"], ["mov eax, dword ptr [0x80b179c]", "mov ecx, dword ptr [0x80b1784]", "mov dword ptr [esp], eax", "mov dword ptr [esp + 4], ecx", "call 0x804c2f0", "jmp 0x804a6c1"], ["mov eax, dword ptr [0x80b179c]", "mov ecx, dword ptr [0x80b1784]", "mov dword ptr [esp], eax", "mov dword ptr [esp + 4], ecx", "call 0x806e6c0", "jmp 0x804a6c1"], ["mov eax, dword ptr [0x80b1784]", "mov dword ptr [esp], eax", "call 0x804fb80", "jmp 0x804a6c1"], ["mov eax, dword ptr [0x80b1784]", "mov dword ptr [esp], eax", "call 0x804ff70", "jmp 0x804a6c1"], ["mov eax, dword ptr [0x80b1784]", "mov dword ptr [esp], eax", "call 0x8050700", "jmp 0x804a6c1"], ["mov eax, dword ptr [0x80b179c]", "mov ecx, dword ptr [0x80b1784]", "mov dword ptr [esp], eax", "mov dword ptr [esp + 4], ecx", "call 0x80783f0", "jmp 0x804a6c1"], ["mov eax, dword ptr [0x80b1f4c]", "mov ecx, dword ptr [0x80b1784]", "mov dword ptr [esp], eax", "mov dword ptr [esp + 4], ecx", "call 0x80540c0", "jmp 0x804a6c1"], ["mov eax, dword ptr [0x80b179c]", "mov ecx, dword ptr [0x80b1784]", "mov dword ptr [esp], eax", "mov dword ptr [esp + 4], ecx", "call 0x8079e70", "jmp 0x804a6c1"], ["mov eax, dword ptr [0x80b179c]", "mov ecx, dword ptr [0x80b1784]", "mov dword ptr [esp], eax", "mov dword ptr [esp + 4], ecx", "call 0x806cdf0", "jmp 0x804a6c1"], ["mov eax, dword ptr [0x80b179c]", "mov ecx, dword ptr [0x80b1784]", "mov dword ptr [esp], eax", "mov dword ptr [esp + 4], ecx", "call 0x806cf60", "jmp 0x804a6c1"], ["mov eax, dword ptr [0x80b179c]", "mov ecx, dword ptr [0x80b1784]", "mov dword ptr [esp], eax", "mov dword ptr [esp + 4], ecx", "call 0x8077370", "jmp 0x804a6c1"], ["mov eax, dword ptr [0x80b179c]", "mov ecx, dword ptr [0x80b1784]", "mov dword ptr [esp], eax", "mov dword ptr [esp + 4], ecx", "call 0x8073fc0", "jmp 0x804a6c1"], ["mov eax, dword ptr [0x80b179c]", "mov ecx, dword ptr [0x80b1784]", "mov dword ptr [esp], eax", "mov dword ptr [esp + 4], ecx", "call 0x80740f0", "jmp 0x804a6c1"], ["mov eax, dword ptr [0x80b179c]", "mov ecx, dword ptr [0x80b1784]", "mov dword ptr [esp], eax", "mov dword ptr [esp + 4], ecx", "call 0x80785f0", "jmp 0x804a6c1"], ["mov dword ptr [ebp - 0x14], 0", "mov dword ptr [ebp - 0x18], 0", "mov eax, dword ptr [0x80b179c]", "mov dword ptr [esp], eax", "call 0x8077560", "mov eax, dword ptr [ebp - 0xc]", "cmp eax, dword ptr [ebp + 8]", "jne 0x804a503"], ["xor eax, eax", "mov dword ptr [esp], 0", "lea ecx, [ebp - 0x18]", "mov dword ptr [esp + 4], ecx", "lea ecx, [ebp - 0x14]", "mov dword ptr [esp + 8], ecx", "mov dword ptr [ebp - 0x90], eax", "call 0x80525b0", "jmp 0x804a546"], ["jmp 0x804a508"], ["mov eax, dword ptr [ebp - 0xc]", "cmp eax, dword ptr [ebp + 8]", "jge 0x804a541"], ["mov eax, dword ptr [ebp + 0xc]", "mov ecx, dword ptr [ebp - 0xc]", "mov eax, dword ptr [eax + ecx*4]", "mov dword ptr [esp], eax", "lea eax, [ebp - 0x18]", "mov dword ptr [esp + 4], eax", "lea eax, [ebp - 0x14]", "mov dword ptr [esp + 8], eax", "call 0x80525b0", "mov eax, dword ptr [ebp - 0xc]", "add eax, 1", "mov dword ptr [ebp - 0xc], eax", "jmp 0x804a508"], ["jmp 0x804a546"], ["cmp dword ptr [0x80b17ac], 0", "je 0x804a58b"], ["mov eax, dword ptr [0x80b17ac]", "movzx eax, byte ptr [eax]", "cmp eax, 0", "je 0x804a58b"], ["lea eax, [0x80a160d]", "mov dword ptr [esp], eax", "call 0x80499c0", "mov ecx, dword ptr [0x80b17ac]", "mov dword ptr [esp], eax", "mov dword ptr [esp + 4], ecx", "lea eax, [ebp - 0x18]", "mov dword ptr [esp + 8], eax", "call 0x8052450"], ["cmp dword ptr [ebp - 0x18], 0", "jne 0x804a67a"], ["cmp dword ptr [ebp - 0x14], 1", "jne 0x804a67a"], ["mov eax, dword ptr [0x80b179c]", "mov eax, dword ptr [eax + 0x570]", "mov eax, dword ptr [eax + 0x18]", "mov ecx, dword ptr [0x80b179c]", "mov ecx, dword ptr [ecx + 0x570]", "mov ecx, dword ptr [ecx + 0x14]", "sub ecx, 1", "mov eax, dword ptr [eax + ecx*4]", "mov dword ptr [ebp - 0x1c], eax", "mov eax, dword ptr [0x80b179c]", "mov eax, dword ptr [eax + 0x570]", "mov eax, dword ptr [eax + 0x14]", "mov dword ptr [ebp - 0x20], eax"], ["mov eax, dword ptr [ebp - 0x1c]", "cmp dword ptr [eax + 4], 0", "setne cl", "xor cl, 0xff", "test cl, 1", "jne 0x804a5f1"], ["jmp 0x804a619"], ["mov eax, dword ptr [ebp - 0x20]", "add eax, -1", "mov dword ptr [ebp - 0x20], eax", "mov eax, dword ptr [0x80b179c]", "mov eax, dword ptr [eax + 0x570]", "mov eax, dword ptr [eax + 0x18]", "mov ecx, dword ptr [ebp - 0x20]", "sub ecx, 1", "mov eax, dword ptr [eax + ecx*4]", "mov dword ptr [ebp - 0x1c], eax", "jmp 0x804a5d6"], ["mov eax, dword ptr [0x80b179c]", "mov dword ptr [esp], eax", "call 0x8078620", "mov eax, dword ptr [0x80b179c]", "mov eax, dword ptr [eax + 0xb8]", "mov eax, dword ptr [eax + 4]", "mov ecx, dword ptr [ebp - 0x1c]", "mov ecx, dword ptr [ecx + 4]", "mov dword ptr [esp], eax", "mov dword ptr [esp + 4], ecx", "call 0x80689e0", "mov eax, dword ptr [ebp - 0x1c]", "mov eax, dword ptr [eax + 4]", "mov dword ptr [esp], eax", "call 0x8049840", "mov ecx, dword ptr [0x80b179c]", "mov dword ptr [esp], ecx", "mov dword ptr [ebp - 0x94], eax", "call 0x8078940", "mov eax, dword ptr [0x80b179c]", "mov dword ptr [esp], eax", "call 0x80521b0", "jmp 0x804a6b7"], ["cmp dword ptr [ebp - 0x18], 0", "jne 0x804a68e"], ["cmp dword ptr [ebp - 0x14], 0", "je 0x804a6ad"], ["mov eax, dword ptr [0x80b179c]", "mov dword ptr [esp], eax", "call 0x80776c0", "mov eax, dword ptr [0x80b179c]", "mov dword ptr [esp], eax", "call 0x80521b0", "jmp 0x804a6b2"], ["call 0x8052400"], ["jmp 0x804a6b7"], ["jmp 0x804a6c1"], ["call 0x8049c20"], ["mov eax, dword ptr [0x80b179c]", "mov dword ptr [esp], eax", "call 0x806f2c0", "xor eax, eax", "mov dword ptr [0x80b179c], 0", "add esp, 0xb4", "pop esi", "pop ebp", "ret "]]')
    arch_list = ['x86'] * 2
    asm_norm_list = []
    hex_norm_list = []
    inst_bound_asm_list = []
    inst_bound_hex_list = []
    for asm_str, hex_str, arch in tqdm(zip(asm_str_list, hex_str_list, arch_list), desc="asm", total=len(asm_str_list)):
        asm_list = norm_inst(json.loads(asm_str), arch=arch, split_hex=False)
        hex_list = norm_hex(json.loads(hex_str), arch=arch)
        asm_norm_str = ' '.join(asm_list)
        hex_norm_str = ' '.join(hex_list)
        asm_norm_list.append(asm_norm_str)
        hex_norm_list.append(hex_norm_str)

    tokens_asm = [tokenizer(asm, add_special_tokens=True, max_length=args.max_seq_length,
                            padding='max_length', truncation=True) for asm in tqdm(asm_norm_list, desc="tokenizer")]
    tokens_hex = [tokenizer(hex, add_special_tokens=True, max_length=args.max_seq_length,
                            padding='max_length', truncation=True) for hex in tqdm(hex_norm_list, desc="tokenizer")]
    dataset = TensorDataset(torch.LongTensor([token['input_ids'] for token in tokens_asm]),
                            torch.LongTensor([token['attention_mask'] for token in tokens_asm]),
                            torch.LongTensor([token['input_ids'] for token in tokens_hex]),
                            torch.LongTensor([token['attention_mask'] for token in tokens_hex]))

    dataloader = DataLoader(dataset, batch_size=1)
    model.cuda()
    model.eval()
    all_embeddings = []
    with torch.no_grad():
        for batch in tqdm(dataloader, desc="batch"):
            input_ids_asm, attention_mask_asm, input_ids_hex, attention_mask_hex = batch
            input_ids_asm, attention_mask_asm, input_ids_hex, attention_mask_hex = \
                input_ids_asm.cuda(), attention_mask_asm.cuda(), \
                    input_ids_hex.cuda(), attention_mask_hex.cuda()
            bert_model = model.bert
            outputs_asm = bert_model(input_ids=input_ids_asm, attention_mask=attention_mask_asm)
            outputs_hex = bert_model(input_ids=input_ids_hex, attention_mask=attention_mask_hex)
            embedding_asm = outputs_asm.last_hidden_state
            embedding_hex = outputs_hex.last_hidden_state
            embedding_vector = model.fuse_asm_hex_vectors(embedding_asm, embedding_hex)
            all_embeddings.append(embedding_vector)
    final_embeddings = torch.cat(all_embeddings, dim=0)
    print(final_embeddings.size())
